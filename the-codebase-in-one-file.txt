
//filepath: src\main.cpp
#include <Arduino.h>

#include "./user.hpp"
#include "./send-byte.hpp"
#include "./read-byte.hpp"

#define DATA_PIN 25
#define DEFAULT_SEND_FREQUENCY 10000

void setup()
{
    Serial.begin(115200);
    Serial.println(IS_SENDING ? "SENDER" : "RECEIVER"); // Corrected typo in "RECEIVER"

    pinMode(DATA_PIN, IS_SENDING ? OUTPUT : INPUT);
    if (IS_SENDING)
        digitalWrite(DATA_PIN, LOW); // Set initial state
}

void loop()
{
#if IS_SENDING
    for (uint8_t i = 0; i < 100; i++)
    {
        sendByte(i, DATA_PIN, DEFAULT_SEND_FREQUENCY);
        delay(1000);
    }
#else
    Serial.println("received: " + String(readByte(DATA_PIN, DEFAULT_SEND_FREQUENCY))); // Corrected "recieved" to "received"
#endif
}

//filepath: src\read-byte.hpp
#pragma once
#include <Arduino.h>

uint8_t readByte(int pin, int delayTime)
{
    // Wait for the start signal (HIGH state)
    while (digitalRead(pin) != HIGH)
        ;

    // Record start time
    unsigned long startTime = micros();
    unsigned long targetTime = startTime + 1.5 * delayTime;

    // Ensure stable HIGH signal
    while (micros() < targetTime)
        ;

    uint8_t value = 0;

    // Read each bit
    for (uint8_t i = 0; i < 8; i++)
    {
        unsigned long bitStartTime = startTime + ((i + 1.5) * delayTime);

        // Wait for the right time to read the bit
        while (micros() < bitStartTime)
            ;

        // Sample the bit
        if (digitalRead(pin) == HIGH)
        {
            value |= (1 << i);
        }
    }

    // Wait for the end of the transmission
    while (digitalRead(pin) == HIGH)
        ;

    return value;
}


//filepath: src\send-byte.hpp
#pragma once
#include <Arduino.h>

void sendByte(uint8_t value, int pin, int delayTime)
{
    // Start signal
    digitalWrite(pin, HIGH);
    delayMicroseconds(delayTime);
    digitalWrite(pin, LOW);
    delayMicroseconds(delayTime);

    unsigned long startTime = micros();

    // Send each bit
    for (uint8_t i = 0; i < 8; i++)
    {
        bool bit = (value & (1 << i)) != 0;
        digitalWrite(pin, bit ? HIGH : LOW);

        // Wait for the bit duration
        unsigned long bitEndTime = startTime + ((i + 1) * delayTime);
        while (micros() < bitEndTime)
            ;
    }

    // End signal
    digitalWrite(pin, LOW);
    delayMicroseconds(delayTime);
}

//filepath: src\user.hpp
#pragma once
// Don't edit this file
#define IS_SENDING true

